{"version":3,"sources":["Components/D3/SingleTimeline.module.css","react-auth0-spa.js","Queries/timestamps.js","Queries/projects.js","Components/Timer.js","Helpers/UseTimer.js","Components/NavBar.js","Components/SecuredRoute.js","Components/TimeStampsListItem.js","Helpers/TimeStampReducers.js","Components/TimeStampsList.js","Components/LineChart.js","Components/D3/SingleTimeline.js","Helpers/UseResizeObserver.js","Components/edit/EditProjectPopup.js","Pages/Projects.js","Queries/tasks.js","Components/edit/EditTaskPopup.js","Pages/ProjectDetails.js","Pages/TaskDetails.js","utils/history.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","Auth0Provider","children","onRedirectCallback","initOptions","useState","isAuthenticated","setIsAuthenticated","user","setUser","auth0Client","setAuth0","loading","setLoading","popupOpen","setPopupOpen","useEffect","a","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","initAuth0","loginWithPopup","params","console","error","Provider","value","getIdTokenClaims","loginWithRedirect","getTokenSilently","getTokenWithPopup","logout","ADD_TIMESTAMP","gql","UPDATE_TIMESTAMP","IS_RUNNING","DELETE_PROJECT","addProject","updateProject","projectsQuery","projectsList","getProject","Timer","props","filterTaskOptions","projectIDFilter","tasks","taskOptions","projects","forEach","p","push","Tasks","map","t","key","id","text","Name","parent_project","parentProject","filter","projOptions","filterProjectOptions","projectOptions","setTaskOptions","selectedProject","setSelectedProject","selectedTask","setSelectedTask","currentTimestamp","setCurrentTimestamp","useMutation","update","proxy","tsResult","data","insert_TimeStamp","returning","refetchQueries","mutationResult","query","GET_PROJECTS","addTimestamp","updateTimestamp","useQuery","variables","UserId","sub","timer","setTimer","isRunning","setIsRunning","callback","delay","savedCallback","useRef","current","setInterval","clearInterval","useInterval","formatTime","s","h","Math","floor","m","S","leadingZero","startTime","Project","Task","StartTime","Date","toUTCString","Public","TimeStamp","length","parentTask","Icon","name","size","Menu","Fragment","Dropdown","placeholder","selection","options","onChange","e","disabled","Grid","floated","Row","verticalAlign","Column","center","width","color","onClick","EndTime","NavBar","Item","position","Button","positive","log","SecuredRoute","Component","component","path","render","TimeStampsListItem","List","stamp","Content","to","style","fontWeight","textAlign","toHMS","toLocaleTimeString","hour","minute","fontStyle","toLocaleDateString","year","month","day","TimeStampsList","timestamps","divided","relaxed","className","index","SingleTimeline","svgRef","wrapperRef","dimensions","ref","setDimensions","observeTarget","resizeObserver","ResizeObserver","entries","entry","contentRect","observe","unobserve","useResizeObserver","now","datesFilter","setDatesFilter","highlight","ts","self","indexOf","sort","b","d","getBoundingClientRect","svg","height","select","minDate","min","maxDate","max","xScale","scaleTime","domain","range","maxTime","yScale","scaleLinear","selectAll","join","attr","xAxis","axisBottom","ticks","timeMonth","every","call","yAxis","axisRight","borderRadius","background","padding","marginTop","marginBottom","paddingBottom","Input","type","target","styles","EditProjectPopup","isOpen","setIsOpen","setName","description","setDescription","isPublic","setIsPublic","close","modal","EDIT_PROJECT","editProject","projData","icon","labelPosition","Modal","dimmer","open","onClose","Header","Form","onSubmit","preventDefault","Description","Field","TextArea","rows","Radio","toggle","checked","content","Projects","ADD_PROJECT","deleteProject","Breadcrumb","margin","stackable","aria-hidden","project","updateTask","EditTaskPopup","public","setProject","EDIT_TASK","GET_PROJECT","editTask","button","floating","labeled","ADD_TASK","DELETE_TASK","ProjectDetails","useParams","addTask","deleteTask","Project_by_pk","task","TimeStamps","Actions","GET_TASK","TaskDetails","Task_by_pk","createBrowserHistory","App","accessToken","setAccessToken","getAccessToken","token","httpLink","HttpLink","uri","authLink","setContext","_","headers","Authorization","__raw","client","ApolloClient","link","concat","cache","InMemoryCache","exact","Boolean","hostname","match","targetUrl","ApolloApp","config","client_id","clientId","redirect_uri","origin","audience","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.96c35850.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"padding-8\":\"SingleTimeline_padding-8__2JLjo\",\"overflow-visible\":\"SingleTimeline_overflow-visible__Ff5Sf\"};","import React, { useState, useEffect, useContext } from \"react\";\r\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\r\n\r\nconst DEFAULT_REDIRECT_CALLBACK = () =>\r\n  window.history.replaceState({}, document.title, window.location.pathname);\r\n\r\nexport const Auth0Context = React.createContext();\r\nexport const useAuth0 = () => useContext(Auth0Context);\r\nexport const Auth0Provider = ({\r\n  children,\r\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\r\n  ...initOptions\r\n}) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState();\r\n  const [user, setUser] = useState();\r\n  const [auth0Client, setAuth0] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  const [popupOpen, setPopupOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const initAuth0 = async () => {\r\n      const auth0FromHook = await createAuth0Client(initOptions);\r\n      setAuth0(auth0FromHook);\r\n\r\n      if (window.location.search.includes(\"code=\") &&\r\n          window.location.search.includes(\"state=\")) {\r\n        const { appState } = await auth0FromHook.handleRedirectCallback();\r\n        onRedirectCallback(appState);\r\n      }\r\n\r\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\r\n\r\n      setIsAuthenticated(isAuthenticated);\r\n\r\n      if (isAuthenticated) {\r\n        const user = await auth0FromHook.getUser();\r\n        setUser(user);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n    initAuth0();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const loginWithPopup = async (params = {}) => {\r\n    setPopupOpen(true);\r\n    try {\r\n      await auth0Client.loginWithPopup(params);\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      setPopupOpen(false);\r\n    }\r\n    const user = await auth0Client.getUser();\r\n    setUser(user);\r\n    setIsAuthenticated(true);\r\n  };\r\n\r\n  const handleRedirectCallback = async () => {\r\n    setLoading(true);\r\n    await auth0Client.handleRedirectCallback();\r\n    const user = await auth0Client.getUser();\r\n    setLoading(false);\r\n    setIsAuthenticated(true);\r\n    setUser(user);\r\n  };\r\n  return (\r\n    <Auth0Context.Provider\r\n      value={{\r\n        isAuthenticated,\r\n        user,\r\n        loading,\r\n        popupOpen,\r\n        loginWithPopup,\r\n        handleRedirectCallback,\r\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\r\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\r\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\r\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\r\n        logout: (...p) => auth0Client.logout(...p)\r\n      }}\r\n    >\r\n      {children}\r\n    </Auth0Context.Provider>\r\n  );\r\n};","import gql from 'graphql-tag'\r\n\r\nexport { ADD_TIMESTAMP, UPDATE_TIMESTAMP, IS_RUNNING }\r\n\r\nconst ADD_TIMESTAMP = gql`\r\nmutation insert_Timestamp($Project: uuid!, $Task: uuid!, $StartTime: timestamptz!, $Public: Boolean!, $UserId: String! ) {\r\n    insert_TimeStamp(objects: { Project: $Project, Task: $Task, StartTime: $StartTime, Public: $Public, user_id: $UserId }){\r\n      affected_rows\r\n      returning {\r\n          id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPDATE_TIMESTAMP = gql`\r\nmutation update_Timestamp($id: uuid!, $Project: uuid!, $Task: uuid!, $EndTime: timestamptz!, $Public: Boolean!) {\r\n    update_TimeStamp(where: {id: {_eq: $id}}, _set: {EndTime: $EndTime, Project: $Project, Public: $Public, Task: $Task}) {\r\n      affected_rows\r\n    }\r\n  }\r\n`;\r\n\r\nconst IS_RUNNING = gql`query Running( $UserId: String! ) {\r\n    TimeStamp(where: {StartTime: {_is_null: false}, EndTime: {_is_null: true}, user_id: {_eq: $UserId}}) {\r\n      id\r\n      StartTime\r\n      parentProject {\r\n        id\r\n        Name\r\n      }\r\n      parentTask {\r\n        id\r\n        Name\r\n      }\r\n    }\r\n  }\r\n`\r\n","import gql from 'graphql-tag'\r\n\r\nexport const DELETE_PROJECT = gql`\r\nmutation deleteProject($id: uuid!) {\r\n    delete_Project(where: {id: {_eq: $id}}) {\r\n      affected_rows\r\n    }\r\n  }\r\n`\r\nexport const addProject = gql`\r\n  mutation addProject($Name: String!, $Description: String!, $Public: Boolean!, $UserId: String! ){\r\n    insert_Project(objects: {Description: $Description, Name: $Name, Public: $Public, user_id: $UserId }) {\r\n      affected_rows\r\n    }\r\n  }\r\n`;\r\n\r\nexport const updateProject = gql`\r\n    mutation updateProject($id: uuid!, $Description: String!, $Name: String!, $Public: Boolean!) {\r\n        update_Project(where: {id: {_eq: $id}}, _set: {Description: $Description, Name: $Name, Public: $Public}) {\r\n        affected_rows\r\n    }\r\n}`;\r\n\r\nexport const projectsQuery = gql`\r\nquery getProjects {\r\n  Project {\r\n    id\r\n    Name\r\n    Description\r\n    Tasks {\r\n        id\r\n        Name\r\n        parentProject {\r\n            id\r\n        }\r\n    }\r\n    Public\r\n  },\r\n  TimeStamp(order_by: {StartTime: desc, EndTime: desc_nulls_first}){\r\n    StartTime\r\n          EndTime\r\n          parentTask{ \r\n              id\r\n              Name \r\n          }\r\n          parentProject{\r\n              id\r\n              Name\r\n          }\r\n  }\r\n}\r\n`;\r\n\r\nexport const projectsList = gql`\r\n        query getProjects {\r\n            Project {\r\n              id\r\n              Name\r\n            }\r\n        }\r\n    `\r\n\r\n    export const getProject = gql`\r\n    query getProject($id: uuid!) {\r\n      Project_by_pk(id: $id) {\r\n        id\r\n        Name\r\n        Description\r\n        Tasks {\r\n            id\r\n            Name\r\n            Description\r\n            Public\r\n            Project\r\n        }\r\n        TimeStamps(order_by: {StartTime: desc, EndTime: desc_nulls_first}){\r\n              StartTime\r\n              EndTime\r\n              parentTask{ \r\n                  id\r\n                  Name \r\n              }\r\n              parentProject{ \r\n                  id\r\n                  Name \r\n              }\r\n        }\r\n      }\r\n    }\r\n  `","import React, { useState, useEffect } from 'react'\r\nimport { Card, Icon, Grid, Form, Dropdown, Menu } from 'semantic-ui-react'\r\nimport useTimer from '../Helpers/UseTimer'\r\nimport useInterval from '../Helpers/UseTimer'\r\nimport gql from 'graphql-tag';\r\nimport { useMutation, useQuery } from '@apollo/react-hooks';\r\n\r\nimport { ADD_TIMESTAMP, UPDATE_TIMESTAMP, IS_RUNNING } from '../Queries/timestamps'\r\nimport { projectsQuery as GET_PROJECTS } from '../Queries/projects' \r\n\r\nexport const Timer = (props) => {\r\n\r\n    const filterProjectOptions = () => {\r\n        const projOptions = [];\r\n        props.projects.map((p) => {\r\n            projOptions.push({\r\n                key: p.id,\r\n                value: p.id,\r\n                text: p.Name,\r\n            })\r\n        })\r\n        return projOptions\r\n    }\r\n    const filterTaskOptions = (projectIDFilter) => {\r\n        const tasks = [];\r\n        let taskOptions = [];\r\n        props.projects.forEach((p) => tasks.push(...p.Tasks))\r\n        tasks.map((t) => {\r\n            taskOptions.push({\r\n                key: t.id,\r\n                value: t.id,\r\n                text: t.Name,\r\n                parent_project: t.parentProject.id\r\n            })\r\n        })\r\n\r\n        if (projectIDFilter) {\r\n            taskOptions = taskOptions.filter(t => t.parent_project == projectIDFilter)\r\n        }\r\n        return taskOptions\r\n    }\r\n\r\n    const [projectOptions, setProjectOptions] = useState(filterProjectOptions())\r\n    const [taskOptions, setTaskOptions] = useState(filterTaskOptions())\r\n\r\n    const [selectedProject, setSelectedProject] = useState()\r\n    const [selectedTask, setSelectedTask] = useState()\r\n    const [currentTimestamp, setCurrentTimestamp] = useState()\r\n\r\n    //mutations and subscriptions\r\n    const [addTimestamp] = useMutation(ADD_TIMESTAMP, {\r\n        update: (proxy, tsResult) => setCurrentTimestamp(tsResult.data.insert_TimeStamp.returning[0].id),\r\n        refetchQueries: mutationResult => [{ query: GET_PROJECTS }]\r\n    })\r\n    const [updateTimestamp] = useMutation(UPDATE_TIMESTAMP, {\r\n        refetchQueries: mutationResult => [{ query: GET_PROJECTS }]\r\n    })\r\n    const { loading, data } = useQuery(IS_RUNNING, { variables: { UserId: props.user.sub } })\r\n\r\n    const [timer, setTimer] = useState(0)\r\n    const [isRunning, setIsRunning] = useState(false);\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    useInterval(() => {\r\n        setTimer(timer + 1)\r\n    }, isRunning ? 1000 : null)\r\n\r\n\r\n    const formatTime = (s) => {\r\n        const h = Math.floor(s / 60 / 60)\r\n        const m = Math.floor(s / 60 % 60)\r\n        const S = Math.floor(s % 60 % 60)\r\n        const leadingZero = (t) => t < 10 ? `0${t}` : `${t}`\r\n\r\n        return `${leadingZero(h)}h  ${leadingZero(m)}m  ${leadingZero(S)}s`\r\n    }\r\n\r\n    const startTime = async () => {\r\n        setIsRunning(true)\r\n        addTimestamp({ variables: { Project: selectedProject, Task: selectedTask, StartTime: new Date().toUTCString(), Public: true, UserId: props.user.sub } })\r\n    }\r\n\r\n    const endTime = () => {\r\n        setIsRunning(false)\r\n        setTimer(0)\r\n        updateTimestamp({ variables: { id: currentTimestamp, Project: selectedProject, Task: selectedTask, EndTime: new Date().toUTCString(), Public: true } })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (data && data.TimeStamp.length > 0) {\r\n            setTimer((new Date() - new Date(data.TimeStamp[0].StartTime)) / 1000);\r\n            setCurrentTimestamp(data.TimeStamp[0].id);\r\n            setIsRunning(true);\r\n            setSelectedProject(data.TimeStamp[0].parentProject.id);\r\n            setSelectedTask(data.TimeStamp[0].parentTask.id)\r\n        }\r\n        if (data && data.TimeStamp.length <= 0) {\r\n            setIsRunning(false)\r\n            setCurrentTimestamp(null)\r\n            setSelectedProject('')\r\n            setSelectedTask('')\r\n            setTimer(null)\r\n        }\r\n    }, [data, props])\r\n\r\n\r\n    if (loading) return <Icon name='cog' size='huge' loading ></Icon>\r\n\r\n    return (\r\n        <Menu>\r\n            {props.projects || props.tasks ? (\r\n                <React.Fragment>\r\n                    {props.projects ? (\r\n                        <Dropdown\r\n                            placeholder='Select Project'\r\n                            search\r\n                            selection\r\n                            value={selectedProject}\r\n                            options={projectOptions}\r\n                            onChange={(e, data) => { setSelectedProject(data.value); setSelectedTask(); setTaskOptions(filterTaskOptions(data.value)) }}\r\n                        />\r\n                    ) : null}\r\n                    <Dropdown\r\n                        \r\n                        disabled={selectedProject ? false : true}\r\n                        placeholder='Select Task'\r\n                        search\r\n                        selection\r\n                        value={selectedTask}\r\n                        options={taskOptions}\r\n                        onChange={(e, data) => { setSelectedTask(data.value); }}\r\n                    />\r\n                </React.Fragment>) : null}\r\n            \r\n                <Grid floated={'right'}>\r\n                    <Grid.Row verticalAlign={'middle'} >\r\n                        <Grid.Column center width={12}>\r\n                            <h4> {timer ? formatTime(timer) : formatTime(0)} </h4>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={4}>\r\n                            <Icon disabled={!selectedProject || !selectedTask} size='large' name={isRunning ? 'stop circle' : 'play circle'}\r\n                                color={isRunning ? 'red' : 'green'}\r\n                                onClick={() => isRunning ? endTime() : startTime()}\r\n                            />\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n        </Menu>\r\n    )\r\n\r\n}\r\n\r\n","import { useEffect, useRef } from 'react'\r\n\r\nexport default function useInterval(callback, delay) {\r\n    const savedCallback = useRef();\r\n  \r\n    // Remember the latest function.\r\n    useEffect(() => {\r\n      savedCallback.current = callback;\r\n    }, [callback]);\r\n  \r\n    // Set up the interval.\r\n    useEffect(() => {\r\n      function tick() {\r\n        savedCallback.current();\r\n      }\r\n      if (delay !== null) {\r\n        let id = setInterval(tick, delay);\r\n        return () => clearInterval(id);\r\n      }\r\n    }, [delay]);\r\n}\r\n\r\n","import React, { useState } from \"react\";\r\nimport { useAuth0 } from \"../react-auth0-spa\";\r\nimport { Button, Icon, Dropdown, Menu, MenuItem } from \"semantic-ui-react\";\r\n\r\nimport { Timer } from './Timer'\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst GET_PROJECTS = gql`\r\n  query getProjects {\r\n    Project {\r\n      id\r\n      Name\r\n      Description\r\n      TimeStamps{\r\n            StartTime\r\n            EndTime\r\n            parentTask{ \r\n                id\r\n                Name \r\n            }\r\n      }\r\n      Tasks {\r\n          id\r\n          Name\r\n          parentProject {\r\n              id\r\n          }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst NavBar = (props) => {\r\n  const { isAuthenticated, loginWithRedirect, user, logout } = useAuth0();\r\n\r\n  const { data, loading } = useQuery(GET_PROJECTS)\r\n\r\n  const [isOpen, setIsOpen] = useState(false)\r\n\r\n  const toggleIsOpen = () => {\r\n    setIsOpen(!isOpen)\r\n  }\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Menu>\r\n        <Menu.Item position='right'>\r\n          {!isAuthenticated && (\r\n            <Button positive onClick={() => loginWithRedirect()}>Log in</Button>\r\n          )}\r\n          {isAuthenticated && <Button positive onClick={() => logout()}>Log out</Button>}\r\n        </Menu.Item>\r\n      </Menu>\r\n      {console.log(user)}\r\n      {isAuthenticated && data && (\r\n\r\n        <Timer projects={data.Project} user={user} ></Timer>\r\n\r\n      )}\r\n    </React.Fragment>\r\n\r\n  );\r\n};\r\n\r\nexport default NavBar;","import React, { useEffect } from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport { useAuth0 } from \"../react-auth0-spa\";\r\n\r\n\r\nfunction SecuredRoute(props) {\r\n  const {component: Component, path} = props;\r\n  const { loading, isAuthenticated,loginWithRedirect, getTokenSilently } = useAuth0();\r\n\r\n    useEffect(() =>{\r\n        if(loading || isAuthenticated){\r\n            return;\r\n        }\r\n        getTokenSilently();\r\n    })\r\n\r\n  return (\r\n    <Route path={path} render={() => {\r\n        if (!isAuthenticated) {\r\n          loginWithRedirect({});\r\n          return <div></div>;\r\n        }\r\n        return <Component />\r\n    }} />\r\n  );\r\n}\r\n\r\nexport default SecuredRoute;","import React from 'react'\r\nimport {\r\n    Grid, List,\r\n    Input, Card,\r\n    Icon,\r\n} from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { toHMS } from '../Helpers/TimeStampReducers'\r\n\r\nconst TimeStampsListItem = (props) => {\r\n\r\n\r\n    return (\r\n        <List.Item key={props.stamp.id}>\r\n            <List.Content>\r\n                <Grid>\r\n                    <Grid.Row>\r\n                        <Grid.Column width={8}>\r\n                            <h4><Link to={`/task/${props.stamp.parentTask.id}`}>{props.stamp.parentTask.Name}</Link></h4>\r\n                            <Link style={{fontWeight: '500'}} to={`/project/${props.stamp.parentProject.id}`}>for {props.stamp.parentProject.Name}</Link>\r\n                        </Grid.Column>\r\n                        <Grid.Column style={{ textAlign: 'right' }} width={8}>\r\n                            <div >\r\n                                <h4>{ props.stamp.EndTime ? toHMS((new Date(props.stamp.EndTime) - new Date(props.stamp.StartTime)) / 1000) : 'Clock Running'}</h4>\r\n                                <strong>  {new Date(props.stamp.StartTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}  </strong>  \r\n                                - \r\n                                <strong>  {new Date(props.stamp.EndTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</strong>\r\n                            </div>\r\n                            <div style={{ fontStyle: 'italic', }}>\r\n                                <strong>{new Date(props.stamp.StartTime).toLocaleDateString([], { year: 'numeric', month: 'short', day: 'numeric' })}</strong>\r\n                            </div>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </List.Content>\r\n        </List.Item>\r\n    )\r\n\r\n}\r\n\r\nexport default TimeStampsListItem","\r\nexport const toHMS = (s) => {\r\n    const h = Math.floor(s / 60 / 60)\r\n    const m = Math.floor(s / 60 % 60)\r\n    const S = Math.floor(s % 60 % 60)\r\n    const leadingZero = (t) => t < 10 ? `0${t}` : `${t}`\r\n\r\n    return `${leadingZero(h)}h  ${leadingZero(m)}m  ${leadingZero(S)}s`\r\n}\r\n\r\nexport const groupByDate = (array, key) => {\r\n\r\n    const g = {}\r\n    \r\n    array.forEach( t => {\r\n        if( g[new Date(t[key]).toDateString()] ){\r\n            g[new Date(t[key]).toDateString()].data.push(t)\r\n            g[new Date(t[key]).toDateString()].totalTime += (new Date(t.EndTime) - new Date(t.StartTime))\r\n        }\r\n        else{\r\n            g[new Date(t[key]).toDateString()] = {\r\n                data: [t],\r\n                totalTime: new Date(t.EndTime) - new Date(t.StartTime)\r\n            }\r\n        }\r\n    })\r\n\r\n    return g\r\n} \r\n\r\nexport const groupByYear = (array, key) => {\r\n\r\n    const g = {}\r\n    \r\n    array.forEach( t => {\r\n    \r\n        if( g[new Date(t[key]).getFullYear()] ){\r\n            g[new Date(t[key]).getFullYear()].data.push(t)\r\n            g[new Date(t[key]).getFullYear()].totalTime += (new Date(t.EndTime) - new Date(t.StartTime))\r\n        }\r\n        else{\r\n        \r\n            g[new Date(t[key]).getFullYear()] = {\r\n                data: [t],\r\n                totalTime: new Date(t.EndTime) - new Date(t.StartTime)\r\n            }\r\n        \r\n        }\r\n    })\r\n\r\n    return g\r\n}\r\n\r\nexport const groupByMonth = (array, key) => {\r\n\r\n    const g = {}\r\n    \r\n    array.forEach( t => {\r\n    \r\n        if( g[new Date(t[key]).getMonth()] ){\r\n            g[new Date(t[key]).getMonth()].data.push(t)\r\n            g[new Date(t[key]).getMonth()].totalTime += (new Date(t.EndTime) - new Date(t.StartTime))\r\n        }\r\n        else{\r\n        \r\n            g[new Date(t[key]).getMonth()] = {\r\n                data: [t],\r\n                totalTime: new Date(t.EndTime) - new Date(t.StartTime)\r\n            }\r\n        \r\n        }\r\n    })\r\n\r\n    return g\r\n} \r\n\r\n\r\nexport const combineProjectsTimeStamps = P => {\r\n    const ts = []\r\n    P.map( p => ts.push(...p.TimeStamps) )\r\n    return ts\r\n}","import React, { useEffect } from 'react'\r\nimport {\r\n    Grid, List,\r\n} from 'semantic-ui-react'\r\n\r\nimport TimeStampsListItem from './TimeStampsListItem'\r\n\r\nconst TimeStampsList = ({timestamps}) => {\r\n\r\n    useEffect( () => {\r\n        \r\n    }, [timestamps])\r\n\r\n    return (<List divided relaxed className={ 'panel padding-16' }>\r\n        <h3>TimeStamps</h3>\r\n        {\r\n            timestamps.map((stamp, index) => (\r\n                <TimeStampsListItem key={index} stamp={stamp} />\r\n            ))\r\n        }\r\n    </List>)\r\n\r\n}\r\n\r\nexport default TimeStampsList","import React, { useState, useEffect } from 'react'\r\nimport gql from 'graphql-tag'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport {Line} from 'react-chartjs-2'\r\nimport { randColor } from '../Helpers/RandColor'\r\nimport { groupByDate } from '../Helpers/TimeStampReducers'\r\n\r\nconst GET_TIMESTAMPS = gql`\r\n  query GET_TIMESTAMPS {\r\n    TimeStamp(order_by: {StartTime: asc, EndTime: desc_nulls_first}, where: {EndTime: {_is_null: false}}){\r\n        StartTime\r\n        EndTime\r\n        parentTask{ \r\n            id\r\n            Name \r\n        }\r\n        parentProject{\r\n            id\r\n            Name\r\n        }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LineChart = () => {\r\n    const [chartData, setChartData] = useState()\r\n    const { loading, data } = useQuery(GET_TIMESTAMPS)\r\n\r\n    const chart = () => {\r\n        const byDate = groupByDate( data.TimeStamp, 'StartTime' )\r\n        const labels = Object.entries( byDate ).map(s => s[0] )\r\n        const d = Object.entries( byDate ).map(s => s[1].totalTime / 1000 / 60 / 60  )\r\n        \r\n        setChartData({\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    label: 'All Projects', \r\n                    data: d, \r\n                    backgroundColor: ['rgb(0,0,0,0.0)'], \r\n                    borderColor: [randColor()],\r\n                    borderWidth: 2\r\n                }\r\n            ]\r\n        })   \r\n    }\r\n\r\n    useEffect(() => {\r\n        if(data){ chart() }\r\n    }, [data])\r\n\r\n    return(\r\n        <div>\r\n            <Line data={chartData} />\r\n        </div>\r\n    )\r\n}","import React, { useRef, useEffect, useState } from 'react';\r\nimport { select, min, max, scaleTime, line, bar, scaleLinear, axisBottom, axisRight, curveCardinal, curveLinear, brushX, timeDay, timeHour, event, timeMonth } from 'd3';\r\nimport { useResizeObserver } from '../../Helpers/UseResizeObserver';\r\nimport { Input } from 'semantic-ui-react'\r\nimport styles from './SingleTimeline.module.css'\r\n\r\nexport const SingleTimeline = ({ data }) => {\r\n    const svgRef = useRef()\r\n    const wrapperRef = useRef()\r\n    const dimensions = useResizeObserver(wrapperRef)\r\n\r\n    const [datesFilter, setDatesFilter] = useState([\r\n        new Date(Date.now() - (1000 * 60 * 60 * 24 * 7)).toLocaleDateString('en-CA'),\r\n        new Date(Date.now() + (1000 * 60 * 60 * 24 * 1)).toLocaleDateString('en-CA')\r\n    ])\r\n\r\n    const [highlight, setHighlight] = useState();\r\n    const unique = (value, index, self) => {\r\n      return self.indexOf(value) === index\r\n    }\r\n    \r\n    const uniqueProjects = data.map( ts => ts.parentProject.Name ).filter(unique);\r\n\r\n    useEffect(() => {\r\n        data.sort((a, b) => new Date(a.StartTime) - new Date(b.StartTime))\r\n        data = data.filter( d => new Date(d.StartTime) > new Date(datesFilter[0]) && new Date(d.StartTime) < new Date(datesFilter[1]) )\r\n\r\n        const { width, height } = dimensions || wrapperRef.current.getBoundingClientRect();\r\n\r\n        const svg = select(svgRef.current)\r\n        if (!dimensions) return;\r\n\r\n        const minDate = min(data, stamp => new Date(stamp.StartTime))\r\n        const maxDate = max(data, stamp => new Date(stamp.StartTime))\r\n\r\n        const xScale = scaleTime()\r\n            .domain([minDate, maxDate])\r\n            .range([0, dimensions.width - 24])\r\n\r\n        const minTime = min(data, stamp => ((new Date(stamp.EndTime) - new Date(stamp.StartTime)) / 1000 / 60))\r\n        const maxTime = max(data, stamp => ((new Date(stamp.EndTime) - new Date(stamp.StartTime)) / 1000 / 60))\r\n\r\n        const yScale = scaleLinear()\r\n            .domain([maxTime, 0])\r\n            .range([0, dimensions.height - 88])\r\n\r\n        svg.selectAll('.dots')\r\n            .data(data)\r\n            .join('circle')\r\n            .attr('class', 'dots')\r\n            .attr('stroke', '#145b71')\r\n            .attr('fill', 'blue')\r\n            .attr('r', '.1em')\r\n            .attr('cx', p => xScale(new Date(p.StartTime)))\r\n            .attr('cy', p => yScale((new Date(p.EndTime) - new Date(p.StartTime)) / 1000 / 60))\r\n            \r\n\r\n        svg.selectAll('.project').data(data)\r\n            .join('line')\r\n            .attr('class', 'project')\r\n            .attr('stroke', '#145b71')\r\n            .attr('x1', p => xScale(new Date(p.StartTime)))\r\n            .attr('y1', dimensions.height - 88 )\r\n            .attr('x2', p => xScale(new Date(p.StartTime)))\r\n            .attr('y2', p => yScale((new Date(p.EndTime) - new Date(p.StartTime)) / 1000 / 60))\r\n            .attr('stroke-width', '1px')\r\n\r\n\r\n        const xAxis = axisBottom(xScale)\r\n            .ticks(timeMonth.every(1))\r\n\r\n        svg.select(\".x-axis\")\r\n            .style('transform', `translateY(${dimensions.height - 88 }px)`)\r\n            .call(xAxis)\r\n\r\n        const yAxis = axisRight(yScale)\r\n        svg.select('.y-axis')\r\n            .style('transform', `translateX(${dimensions.width - 24}px)`)\r\n            .call(yAxis)\r\n\r\n\r\n    }, [ data, dimensions, highlight, datesFilter ]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            \r\n            {\r\n                datesFilter[0] >= datesFilter[1] ? \r\n                <div style={{ color: 'red', borderRadius: '8px', background: 'white', padding: '8px', marginTop: '8px', marginBottom: '8px' }}>\r\n                    <span>End date must be greater than begin date.</span>\r\n                </div> : null\r\n            }\r\n\r\n            {\r\n              data == [] ? \r\n              <div style={{ color: 'red', borderRadius: '8px', background: 'white', padding: '8px', marginTop: '8px', marginBottom: '8px' }}>\r\n                  <span>No projects data for this time period.</span>\r\n              </div> : null  \r\n            }\r\n            \r\n            <div ref={wrapperRef} style={{ paddingBottom: \"4em\" }} className={ 'inset margin-v-16 padding-16 ui ten wide' }>\r\n                <div style={{ paddingBottom: '24px' }}>\r\n                    <span>From </span><Input type=\"date\" id=\"startDate\" name=\"startDate\" value={datesFilter[0]} onChange={e => setDatesFilter( [ e.target.value, datesFilter[1] ] )} />\r\n                    <span> to </span><Input type=\"date\" id=\"endDate\" name=\"endDate\" value={datesFilter[1]} onChange={e => {setDatesFilter( [ datesFilter[0], e.target.value ] ); console.log(data)}}/>     \r\n                </div>\r\n                <div>\r\n                    <svg ref={svgRef} style={{ paddingBottom: '4em' }} className={ styles['overflow-visible'] }>\r\n                        { data == [] ? <h1>No Data</h1> : null }\r\n                        <g className=\"x-axis\"></g>\r\n                        <g className='y-axis'></g>\r\n                        <g className='brush'></g>\r\n                    </svg>    \r\n                </div>\r\n                \r\n            </div>\r\n        </React.Fragment>\r\n        \r\n    )\r\n}\r\n\r\nexport default SingleTimeline;","import { useState, useEffect } from 'react';\r\n\r\nexport const useResizeObserver = (ref) => {\r\n    const [dimensions, setDimensions] = useState(null);\r\n    useEffect( () => {\r\n        const observeTarget = ref.current;\r\n        const resizeObserver = new ResizeObserver((entries) => {\r\n            entries.forEach( entry => {\r\n                setDimensions(entry.contentRect);\r\n            });\r\n            // set the resized dimensions here later\r\n        });\r\n        \r\n        resizeObserver.observe(observeTarget)\r\n        return () => {\r\n            resizeObserver.unobserve(observeTarget)\r\n        }\r\n    }, [ref])\r\n    \r\n    return dimensions;\r\n};","import React, { useState } from 'react'\r\nimport { useMutation, useQuery } from '@apollo/react-hooks'\r\nimport { Modal, Form, Button, Input, TextArea, Radio, Icon } from 'semantic-ui-react'\r\n\r\nimport { updateProject as EDIT_PROJECT, projectsQuery as GET_PROJECTS } from '../../Queries/projects'\r\n\r\nexport const EditProjectPopup = (props) => {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const [id, setId] = useState(props.id)\r\n    const [name, setName] = useState(props.name)\r\n    const [description, setDescription] = useState(props.description)\r\n    const [isPublic, setIsPublic] = useState(props.isPublic)\r\n\r\n    const open = (modal) => { setIsOpen(true); }\r\n    const close = (modal) => { setIsOpen(false); }\r\n\r\n    const [editProject, { projData }] = useMutation(EDIT_PROJECT, {\r\n        refetchQueries: mutationResult => [{ query: GET_PROJECTS }]\r\n    })\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Button icon labelPosition='left' color='twitter'\r\n                onClick={() => open()}\r\n            >\r\n                Edit\r\n                <Icon name='edit outline' />\r\n            </Button>\r\n\r\n            <Modal dimmer={'blurring'} open={isOpen} onClose={() => close()}>\r\n                <Modal.Header>Edit project</Modal.Header>\r\n                <Modal.Content>\r\n                    <Form onSubmit={e => {\r\n                        e.preventDefault();\r\n                        editProject({\r\n                            variables: { id: id, Description: description, Name: name, Public: isPublic }\r\n                        })\r\n\r\n                        close()\r\n                    }}>\r\n                        <Form.Field>\r\n                            <label>Project name</label>\r\n                            <Input placeholder='Project Name' value={name} onChange={e => setName(e.target.value)} />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Project description</label>\r\n                            <TextArea rows={4} placeholder='Project Description' value={description} onChange={e => setDescription(e.target.value)} />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Make project public?</label>\r\n                            <Radio toggle checked={isPublic} onClick={e => { setIsPublic(e.target.checked = !isPublic); }} />\r\n                        </Form.Field>\r\n\r\n                        <Button\r\n                            positive\r\n                            type='submit'\r\n                            icon='checkmark'\r\n                            labelPosition='right'\r\n                            content=\"Submit Changes\"\r\n                        />\r\n                    </Form>\r\n                </Modal.Content>\r\n            </Modal>\r\n        </React.Fragment>\r\n\r\n    )\r\n\r\n}\r\n\r\n","import React, { useState } from 'react'\r\nimport {\r\n    Grid, List,\r\n    Modal, Button,\r\n    Input, Card,\r\n    Radio, Form,\r\n    TextArea, Icon,\r\n    Breadcrumb\r\n} from 'semantic-ui-react'\r\n\r\nimport gql from 'graphql-tag'\r\nimport { useMutation, useQuery } from '@apollo/react-hooks'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport TimeStampsList from '../Components/TimeStampsList'\r\nimport { LineChart } from '../Components/LineChart'\r\nimport { useAuth0 } from '../react-auth0-spa'\r\n\r\nimport { addProject as ADD_PROJECT, projectsQuery as GET_PROJECTS, DELETE_PROJECT } from '../Queries/projects'\r\nimport { SingleTimeline } from '../Components/D3/SingleTimeline'\r\nimport { EditProjectPopup } from '../Components/edit/EditProjectPopup'\r\n\r\n\r\n\r\nexport const Projects = () => {\r\n    const { user } = useAuth0()\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const [name, setName] = useState('')\r\n    const [description, setDescription] = useState('')\r\n    const [isPublic, setIsPublic] = useState(true)\r\n\r\n    const [addProject, { projData }] = useMutation(ADD_PROJECT, {\r\n        variables: { UserId: user.sub },\r\n        refetchQueries: mutationResult => [{ query: GET_PROJECTS }]\r\n    })\r\n    const [deleteProject] = useMutation(DELETE_PROJECT, {\r\n        refetchQueries: mutationResult => [{ query: GET_PROJECTS }]\r\n    })\r\n\r\n    const open = (modal) => { setIsOpen(true); }\r\n    const close = (modal) => { setIsOpen(false); }\r\n\r\n    const reducedTimeStamps = P => {\r\n        const ts = []\r\n        P.map(p => ts.push(...p.TimeStamps))\r\n        return ts\r\n    }\r\n\r\n    const { loading, error, data } = useQuery(GET_PROJECTS)\r\n    if (loading) return <Icon name='cog' size='huge' loading ></Icon>\r\n    if (error || !data) return <div>ZOINKS! We made a boo boo. Please try back later</div>\r\n    return (\r\n        <div>\r\n\r\n            <Breadcrumb style={{ margin: '12px' }}>\r\n                <p><Link to='/'>Home</Link> / Projects</p>\r\n            </Breadcrumb>\r\n\r\n            <SingleTimeline data={data.TimeStamp} />\r\n\r\n            <Grid>\r\n                <Grid.Row>\r\n                    <Grid.Column width={11}>\r\n                        <h1>All Projects</h1>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n\r\n            <Grid stackable>\r\n                <Grid.Row >\r\n                    <Grid.Column width={10} >\r\n                        <List divided relaxed className={'panel padding-16'}>\r\n                            <h3>Projects</h3>\r\n                            <List.Item key={'Create new projects key'}>\r\n                                <List.Content>\r\n                                    <Grid>\r\n                                        <Grid.Row>\r\n                                            <Grid.Column>\r\n                                                <button className={'ui twitter icon button'}\r\n                                                onClick={() => open()}\r\n                                                >\r\n                                                    <i aria-hidden='true' className='add icon'></i>\r\n                                                        Create Project\r\n                                                </button>\r\n                                            </Grid.Column>\r\n                                        </Grid.Row>\r\n                                    </Grid>\r\n                                </List.Content>\r\n                            </List.Item>\r\n                            {\r\n                                data.Project.map((project, index) => (\r\n                                    <List.Item key={project.id}>\r\n                                        <List.Content>\r\n                                            <Grid>\r\n                                                <Grid.Row>\r\n                                                    <Grid.Column width={12}>\r\n                                                        <List.Header><Link to={`/project/${project.id}`}>{project.Name}</Link></List.Header>\r\n                                                        {project.Description}\r\n                                                    </Grid.Column>\r\n                                                    <Grid.Column width={4}>\r\n                                                        <EditProjectPopup \r\n                                                            id={project.id} name={project.Name} description={project.Description} isPublic={project.Public}\r\n                                                        />\r\n                                                        <span floated='right'>\r\n                                                            <Icon\r\n                                                                size='large' color='red'\r\n                                                                onClick={() => { deleteProject({ variables: { id: project.id } }); setIsPublic(false); setName(''); setDescription('') }}\r\n                                                                floated='right' name='trash alternate outline' />\r\n                                                        </span>\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n                                            </Grid>\r\n                                        </List.Content>\r\n                                    </List.Item>\r\n                                ))\r\n                            }\r\n                        </List>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={6}>\r\n\r\n                        <TimeStampsList timestamps={data.TimeStamp} />\r\n\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n            <Modal dimmer={'blurring'} open={isOpen} onClose={() => close()}>\r\n                <Modal.Header>Create a new project</Modal.Header>\r\n                <Modal.Content>\r\n                    <Form onSubmit={e => {\r\n                        e.preventDefault();\r\n                        addProject({\r\n                            variables: { Description: description, Name: name, Public: isPublic }\r\n                        })\r\n\r\n                        close()\r\n                    }}>\r\n                        <Form.Field>\r\n                            <label>Project name</label>\r\n                            <Input placeholder='Project Name' value={name} onChange={e => setName(e.target.value)} />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Project description</label>\r\n                            <TextArea rows={4} placeholder='Project Description' value={description} onChange={e => setDescription(e.target.value)} />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Make project public?</label>\r\n                            <Radio toggle checked={isPublic} onClick={e => { setIsPublic(e.target.checked = !isPublic); }} />\r\n                        </Form.Field>\r\n                        <Button\r\n                            positive\r\n                            type='submit'\r\n                            icon='checkmark'\r\n                            labelPosition='right'\r\n                            content=\"Create Project\"\r\n                        />\r\n                    </Form>\r\n                </Modal.Content>\r\n            </Modal>\r\n        </div>\r\n    );\r\n\r\n}\r\n","import gql from 'graphql-tag'\r\n\r\nexport const deleteTask = gql`\r\nmutation deleteTask($id: uuid!) {\r\n    delete_Task(where: {id: {_eq: $id}}) {\r\n      affected_rows\r\n    }\r\n  }\r\n`\r\nexport const updateTask = gql\r\n    `mutation UpdateTask($id: uuid!, $Description: String, $Name: String, $Public: Boolean, $Project: uuid) {\r\n        update_Task(where: {id: {_eq: $id}}, _set: {Description: $Description, Name: $Name, Public: $Public, Project: $Project}) {\r\n            affected_rows\r\n        }\r\n    }`;","import React, { useState } from 'react'\r\nimport { useMutation, useQuery } from '@apollo/react-hooks'\r\nimport { Modal, Form, Button, Input, TextArea, Radio, Icon, Dropdown } from 'semantic-ui-react'\r\n\r\nimport { updateTask as EDIT_TASK } from '../../Queries/tasks'\r\nimport { projectsList, getProject as GET_PROJECT, projectsQuery as GET_PROJECTS } from '../../Queries/projects'\r\nimport { IS_RUNNING } from '../../Queries/timestamps'\r\nimport { useAuth0 } from '../../react-auth0-spa'\r\n\r\nexport const EditTaskPopup = (props) => {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const [id, setId] = useState(props.id)\r\n    const [name, setName] = useState(props.name)\r\n    const [description, setDescription] = useState(props.description)\r\n    const [isPublic, setIsPublic] = useState(props.public)\r\n    const [project, setProject] = useState(props.project)\r\n\r\n    const {\r\n        user,\r\n        isAuthenticated,\r\n        getIdTokenClaims,\r\n      } = useAuth0();\r\n\r\n    const open = (modal) => { setIsOpen(true); }\r\n    const close = (modal) => { setIsOpen(false); }\r\n\r\n    const [editTask, { projData }] = useMutation(EDIT_TASK, {\r\n        refetchQueries: mutationResult => [{ query: GET_PROJECT, variables: { id: project } }, {query: GET_PROJECTS}, {query: IS_RUNNING, variables: { UserId: user.sub }}]\r\n    })\r\n\r\n    \r\n    const { loading, error, data } = useQuery(projectsList)\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Button icon labelPosition='left' color='twitter'\r\n                onClick={() => open()}\r\n            >\r\n                Edit\r\n                <Icon name='edit outline' />\r\n            </Button>\r\n            \r\n            <Modal dimmer={'blurring'} open={isOpen} onClose={() => close()}>\r\n                <Modal.Header>Edit task</Modal.Header>\r\n                <Modal.Content>\r\n                    <Form onSubmit={e => {\r\n                        e.preventDefault();\r\n                        editTask({\r\n                            variables: { id: id, Description: description, Name: name, Public: isPublic, Project: project }\r\n                        })\r\n\r\n                        close()\r\n                    }}>\r\n                        <Form.Field>\r\n                            <label>Task name</label>\r\n                            <Input placeholder='Task Name' value={name} onChange={e => setName(e.target.value)} />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Select Parent Project</label>\r\n                            <Dropdown\r\n                                button\r\n                                className='icon'\r\n                                floating\r\n                                labeled\r\n                                icon='folder open'\r\n                                value={project}\r\n                                placeholder='Select Project'\r\n                                options={\r\n                                    data.Project.map(d => {\r\n                                        return {\r\n                                            key: d.id,\r\n                                            text: d.Name,\r\n                                            value: d.id\r\n                                        }\r\n                                    })\r\n                                }\r\n                                onChange={ ( e, data ) => setProject(data.value)}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Task description</label>\r\n                            <TextArea rows={4} placeholder='Task Description' value={description} onChange={e => setDescription(e.target.value)} />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Make task public?</label>\r\n                            <Radio toggle checked={isPublic} onClick={e => { setIsPublic(e.target.checked = !isPublic); }} />\r\n                        </Form.Field>\r\n                        <Button\r\n                            positive\r\n                            type='submit'\r\n                            icon='checkmark'\r\n                            labelPosition='right'\r\n                            content=\"Submit Changes\"\r\n                        />\r\n                    </Form>\r\n                </Modal.Content>\r\n            </Modal>    \r\n        </React.Fragment>\r\n             \r\n    )\r\n\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    Grid, List,\r\n    Modal, Button,\r\n    Input, Breadcrumb,\r\n    Radio, Form,\r\n    TextArea,\r\n    Icon\r\n} from 'semantic-ui-react'\r\n\r\nimport gql from 'graphql-tag'\r\nimport { useQuery, useMutation } from '@apollo/react-hooks'\r\nimport { Link, useParams } from 'react-router-dom'\r\nimport TimeStampsList from '../Components/TimeStampsList'\r\nimport { useAuth0 } from '../react-auth0-spa'\r\nimport { EditTaskPopup } from '../Components/edit/EditTaskPopup'\r\n\r\nimport { getProject as GET_PROJECT } from '../Queries/projects'\r\n\r\nconst ADD_TASK = gql`\r\n  mutation addTask( $Name: String!, $Description: String!, $Public: Boolean!, $Project: uuid!, $UserId: String! ){\r\n    insert_Task(objects: { Description: $Description, Name: $Name, Public: $Public, Project: $Project, user_id: $UserId }) {\r\n      affected_rows\r\n    }\r\n  }\r\n`;\r\nconst DELETE_TASK = gql`\r\nmutation deleteTask($id: uuid!) {\r\n    delete_Task(where: {id: {_eq: $id}}) {\r\n      affected_rows\r\n    }\r\n  }\r\n`\r\nexport const ProjectDetails = () => {\r\n    const { id } = useParams()\r\n    const { user } = useAuth0()\r\n\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const [name, setName] = useState('')\r\n    const [description, setDescription] = useState('')\r\n    const [isPublic, setIsPublic] = useState(true)\r\n\r\n    const [addTask, { projData }] = useMutation(ADD_TASK, {\r\n        variables: { UserId: user.sub },\r\n        refetchQueries: mutationResult => [{ query: GET_PROJECT, variables: { id: id } }]\r\n    })\r\n    const [deleteTask] = useMutation(DELETE_TASK, {\r\n        refetchQueries: mutationResult => [{ query: GET_PROJECT, variables: { id: id } }]\r\n    })\r\n\r\n    const open = () => { setIsOpen(true); }\r\n    const close = () => setIsOpen(false)\r\n\r\n    const { loading, data } = useQuery(GET_PROJECT, { variables: { id } })\r\n\r\n    useEffect(() => {\r\n\r\n    }, [data])\r\n    if (loading) return <Icon name='cog' size='huge' loading ></Icon>\r\n    return (\r\n        <div>\r\n            <Breadcrumb>\r\n                <p><Link to='/'>Home</Link> > <Link to='/projects'>Projects</Link> > {data.Project_by_pk.Name}</p>\r\n            </Breadcrumb>\r\n\r\n            <Grid>\r\n                <Grid.Row>\r\n                    <Grid.Column width={16}>\r\n                        <h1>{data.Project_by_pk.Name}</h1>\r\n                        <p>{data.Project_by_pk.Description}</p>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n\r\n            <Grid divided >\r\n                <Grid.Row >\r\n                    <Grid.Column width={10} >\r\n                        <List divided relaxed>\r\n                            <h3>Tasks</h3>\r\n                            <List.Item key={'Create new tasks key'}>\r\n                                <List.Content>\r\n                                    <Grid>\r\n                                        <Grid.Row>\r\n                                            <Grid.Column>\r\n                                                <button className={'ui twitter icon button'}\r\n                                                onClick={() => open()}\r\n                                                >\r\n                                                    <i aria-hidden='true' className='add icon'></i>\r\n                                                        Create Task\r\n                                                </button>\r\n                                            </Grid.Column>\r\n                                        </Grid.Row>\r\n                                    </Grid>\r\n                                </List.Content>\r\n                            </List.Item>\r\n                            {\r\n                                data.Project_by_pk.Tasks.map((task, index) => (\r\n                                    <List.Item key={task.id}>\r\n                                        <List.Content>\r\n                                            <Grid>\r\n                                                <Grid.Row>\r\n                                                    <Grid.Column width={12}>\r\n                                                        <List.Header>\r\n                                                            <Link to={`/task/${task.id}`}>{task.Name}</Link>\r\n                                                        </List.Header>\r\n                                                        {task.Description}\r\n                                                    </Grid.Column>\r\n                                                    <Grid.Column width={4}>\r\n                                                        <EditTaskPopup\r\n                                                            id={task.id}\r\n                                                            name={task.Name}\r\n                                                            description={task.Description}\r\n                                                            project={task.Project}\r\n                                                            public={task.Public}\r\n                                                        />\r\n                                                        <span floated='right'>\r\n                                                            <Icon\r\n                                                                size='large' color='red'\r\n                                                                onClick={() => { deleteTask({ variables: { id: task.id } }); }}\r\n                                                                floated='right' name='trash alternate outline' \r\n                                                            />\r\n                                                        </span>\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n                                            </Grid>\r\n                                        </List.Content>\r\n                                    </List.Item>\r\n                                ))\r\n                            }\r\n                        </List>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={6}>\r\n                        {\r\n                            data.Project_by_pk.TimeStamps ?\r\n                                <TimeStampsList timestamps={data.Project_by_pk.TimeStamps} /> : <p>Get workin'! No timestamps submitted yet...</p>\r\n                        }\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n            <Modal dimmer={'blurring'} open={isOpen} onClose={() => close()}>\r\n                <Modal.Header>Create a new task for {data.Project_by_pk.Name}</Modal.Header>\r\n                <Modal.Content>\r\n                    <Form onSubmit={e => {\r\n                        e.preventDefault();\r\n                        addTask({\r\n                            variables: { Description: description, Name: name, Public: isPublic, Project: id }\r\n                        })\r\n\r\n                        close()\r\n                    }}>\r\n                        <Form.Field>\r\n                            <label>Task name</label>\r\n                            <Input placeholder='Task Name' value={name} onChange={e => setName(e.target.value)} />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Task description</label>\r\n                            <TextArea rows={4} placeholder='Task Description' value={description} onChange={e => setDescription(e.target.value)} />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Make task public?</label>\r\n                            <Radio toggle checked={isPublic} onClick={e => { setIsPublic(e.target.checked = !isPublic) }} />\r\n                        </Form.Field>\r\n                        <Button\r\n                            positive\r\n                            type='submit'\r\n                            icon='checkmark'\r\n                            labelPosition='right'\r\n                            content=\"Create Project\"\r\n                        />\r\n                    </Form>\r\n\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n\r\n                </Modal.Actions>\r\n            </Modal>\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n","import React from 'react'\r\nimport { Grid, List, Icon, Breadcrumb } from 'semantic-ui-react'\r\n\r\nimport gql from 'graphql-tag'\r\nimport { useQuery, useSubscription } from '@apollo/react-hooks'\r\nimport { Link, useParams } from 'react-router-dom'\r\n\r\nimport { Timer } from '../Components/Timer'\r\nimport TimeStampsList from '../Components/TimeStampsList'\r\n\r\nconst GET_TASK = gql`\r\n  query getTask($id: uuid!) {\r\n    Task_by_pk(id: $id) {\r\n      id\r\n      Name\r\n      Description\r\n      TimeStamps(order_by: {StartTime: desc, EndTime: desc_nulls_first}){\r\n            StartTime\r\n            EndTime\r\n            parentTask{ \r\n                id\r\n                Name \r\n            }\r\n            parentProject {\r\n                id  \r\n                Name\r\n            }\r\n      }\r\n      parentProject {\r\n            id  \r\n            Name\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const TaskDetails = () => {\r\n    const {id} = useParams()\r\n\r\n    const { loading, data } = useQuery(GET_TASK, { variables: {id} })\r\n    if(loading) return <Icon name='cog' size='huge' loading ></Icon>\r\n\r\n    return (\r\n        <div>\r\n            <Breadcrumb>\r\n                <p><Link to='/'>Home</Link> > <Link to='/projects'>Projects</Link> > <Link to={`/project/${data.Task_by_pk.parentProject.id}`}>{data.Task_by_pk.parentProject.Name}</Link> > {data.Task_by_pk.Name}</p>\r\n            </Breadcrumb>\r\n            <h1>{data.Task_by_pk.Name}</h1>\r\n            <p>{data.Task_by_pk.Description}</p>\r\n            <Grid divided >\r\n                <Grid.Row >\r\n                    <Grid.Column width={10} >\r\n                        {\r\n                        data ?\r\n                            <TimeStampsList timestamps={data.Task_by_pk.TimeStamps} /> : <p>Get workin'! No timestamps submitted yet...</p>\r\n                        }\r\n                    </Grid.Column>\r\n                    <Grid.Column width={6}>\r\n                        <h3>Task Details</h3>\r\n                        {\r\n                            <div>\r\n                                <p>{data.Task_by_pk.Description}</p>\r\n                            </div>\r\n                        }\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>    \r\n        </div>\r\n        \r\n    );\r\n\r\n}\r\n","import { createBrowserHistory } from \"history\";\r\nexport default createBrowserHistory();","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport './Override.css';\nimport { Switch, Route, Link, Router as BrowserRouter } from 'react-router-dom';\nimport { Icon, Menu, Dropdown } from 'semantic-ui-react'\n\nimport NavBar from \"./Components/NavBar\";\nimport { useAuth0, isLoggedIn } from \"./react-auth0-spa\";\n\nimport { ApolloProvider, useQuery } from '@apollo/react-hooks'\nimport { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\nimport { setContext } from \"apollo-link-context\";\n\nimport SecuredRoute from './Components/SecuredRoute'\nimport { Projects } from './Pages/Projects'\nimport { ProjectDetails } from './Pages/ProjectDetails'\nimport { TaskDetails } from './Pages/TaskDetails'\nimport { Timer } from './Components/Timer'\nimport history from './utils/history';\n\n\nfunction App() {\n  const [isOpen, setIsOpen] = useState(false)\n  const {\n    user,\n    isAuthenticated,\n    getIdTokenClaims,\n  } = useAuth0();\n\n  const [accessToken, setAccessToken] = useState(\"\");\n  const { getTokenSilently, loading } = useAuth0();\n\n  // get access token\n  const getAccessToken = async () => {\n    // getTokenSilently() returns a promise\n    try {\n      const token = await getIdTokenClaims();\n      setAccessToken(token);\n      // console.log(token);\n    } catch (e) {\n      console.log('error');\n    }\n  };\n  getAccessToken();\n\n\n  const httpLink = new HttpLink({\n    uri: \"https://time-track-application.herokuapp.com/v1/graphql\"\n  });\n  const authLink = setContext((_, { headers }) => {\n    const token = accessToken;\n    if (token) {\n      return {\n        headers: {\n          ...headers,\n          Authorization: `Bearer ${token.__raw}`\n        }\n      };\n    } else {\n      return {\n        headers: {\n          ...headers,\n        }\n      };\n    }\n  });\n\n  const client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n  });\n\n  const toggleIsOpen = () => {\n    setIsOpen(!isOpen)\n  }\n\n  useEffect(() => {\n    getAccessToken();\n  }, [loading, user, getIdTokenClaims, getTokenSilently, isAuthenticated])\n\n  if (loading) {\n    return <Icon name='cog' size='huge' loading ></Icon>;\n  }\n\n  return (\n    <BrowserRouter history={history}>\n      <ApolloProvider client={client}>\n        <NavBar />\n\n        <Switch>\n          <SecuredRoute path=\"/\" component={Projects} exact />\n          <SecuredRoute path=\"/projects\" component={Projects} exact />\n          <SecuredRoute path=\"/project/:id\" component={ProjectDetails} exact />\n          <SecuredRoute path=\"/task/:id\" component={TaskDetails} exact />\n          <SecuredRoute path=\"/timer\" component={Timer} />\n        </Switch>\n      </ApolloProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useReducer } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Auth0Provider } from \"./react-auth0-spa\";\nimport config from \"./auth_config.json\";\n\nconst onRedirectCallback = appState => {\n  window.history.replaceState(\n    {},\n    document.title,\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\n\nconst ApolloApp = () => (\n    <Auth0Provider\n      domain={config.domain}\n      client_id={config.clientId}\n      redirect_uri={window.location.origin}\n      audience={config.audience}\n      onRedirectCallback={onRedirectCallback}\n    >\n      <App className=\"content\" />\n    </Auth0Provider>\n)\n\n\nReactDOM.render(\n  <ApolloApp />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}